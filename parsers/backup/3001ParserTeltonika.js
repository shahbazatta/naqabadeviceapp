/**************************
 * Description:
 * @Author: Mohammad Idris
 * @Created On: 27/11/22
 ***************************/

exports.getAvlDataArr = (strHexBuffer) => {
   try {
      return parseData(strHexBuffer);
   } catch (e) {
      console.error("Error: ", e);
   }
};

exports.getResponseData = (recordCount) => {
   if (recordCount == 1) {
      return '00000001'; // ackowlegemenet for 1 record  	no_of_rec ==1
   }
   if (recordCount > 1) {
      return '00000002'; // ackowlegemenet for 2 or more record      no_of_rec>=2
   }
   return '01';
};

/**********
 * TELTONIKA Device dara parser for port 3001
 * @param data
 * @returns {*}
 */

/*
WHEN COOMUNICATION START SERVER RECEIVED IMEI DATA
000f -- imei length
333530353434353034393433393134 imei

ackowlegemenet 01 for yes 00 for no

data received

00000000
000004ef
08
1c
00000185fc10de100017c4a5ec0cbb757c01170152080000000603ef010101716303424b254310110900570000
00000185fc0f7e800017c4ad8a0cbb73a9011c0148070000000603ef010101716303424b214310110900570000
00000185fc0e1b080017c4b6d90cbb73db01170123080000000603ef010101716303424b214310110900570000
00000185fc0cbb780017c4ace30cbb7140010e0123090000000603ef010101716303424b1f4310110900570000
00000185fc0b5be80017c4b0a90cbb720801130017080000000603ef010101716303424b214310110900570000
00000185fc09fc580017c4b3760cbb6f7e01120017080000000603ef010101716303424b274310110900570000
00000185fc0898e00017c4af1a0cbb6f0a011200a9080000000603ef010101716303424b1f4310110900570000
00000185fc073d380017c4af1a0cbb6f0a011200a9090000000603ef010101716303424b214310110900570000
00000185fc05d9c00017c4ae0f0cbb6e630110014d080000000603ef010101716303424b234310110900570000
00000185fc047a300017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b254310110900570000
00000185fc031aa00017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b244310110900570000
00000185fc01bb100017c4b3870cbb6c2c011b0102070000000603ef010101716303424b234310110900570000
00000185fc005b800017c4ae620cbb6dbc011b0102070000000603ef010101716303424b214310110900570000
00000185fbfef8080017c4aec60cbb6d58011a0102080000000603ef010101716303424b214310110900570000
00000185fbfd9c600017c4b7800cbb6f1a01190162080000000603ef010101716303424b214310110900570000
00000185fbfc38e80017c4b1500cbb6f6e0119009d090000000603ef010101716303424b214310110900570000
00000185fbfad9580017c4b5380cbb704601140077090000000603ef010101716303424b234310110900570000
00000185fbf979c80017c4b5060cbb706701100052080000000603ef010101716303424b204310110900570000
00000185fbf81a380017c4b12f0cbb6fc1010401200a0000000603ef010101716303424b214310110900570000
00000185fbf6baa80017c4b12f0cbb6fc101040120090000000603ef010101716303424b214310110900570000
00000185fbf557300017c4b12f0cbb6fc101040120080000000603ef010101716303424b23431011090057000000000185fbf3f7a00017c4ad790cbb71c601020070090000000603ef010101716303424b25431011090057000000000185fbf298100017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b25431011090057000000000185fbf138800017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b26431011090057000000000185fbefd5080017c4b1f70cbb710e00fa0083090000000603ef010101716303424b23431011090057000000000185fbee79600017c4b8ff0cbb6c0b00fd00da080000000603ef010101716303424b24431011090057000000000185fbed19d00017c4b1720cbb710e0108008a070000000603ef010101716303424b20431011090057000000000185fbebb6580017c4b2bf0cbb6e630114008a070000000603ef010101716303424b1c43101109005700001c
0000186a
//4,4,1,1,all record, 1,4
//Preamble,Data Field Length,codec,number of data,... all record...,number of record end, CRC 16/IBM

//https://wiki.teltonika-gps.com/view/Teltonika_Data_Sending_Protocols
 00000000  //Preamble  4
 000004ef // Data Field Length 4
 08 // codec id 1
 1c  -- number of data 1 1c-28
 // each record length= total length/number of record


 00000185fc10de10 -- timestamp 8 1674971242000 Sunday, January 29, 2023 5:47:22 AM
 00 -- priority 1  0,1,2 low, high, panic
 17c4a5ec -- longitude 4
 0cbb757c -- latitude 4
 0117 -- altitude
 0152 -- angle
 08 -- satelite
 0000 -- speed


000603ef010101716303424b25431011090057000000000185fc0f7e800017c4ad8a0cbb73a9011c0148070000000603ef010101716303424b21431011090057000000000185fc0e1b080017c4b6d90cbb73db01170123080000000603ef010101716303424b21431011090057000000000185fc0cbb780017c4ace30cbb7140010e0123090000000603ef010101716303424b1f431011090057000000000185fc0b5be80017c4b0a90cbb720801130017080000000603ef010101716303424b21431011090057000000000185fc09fc580017c4b3760cbb6f7e01120017080000000603ef010101716303424b27431011090057000000000185fc0898e00017c4af1a0cbb6f0a011200a9080000000603ef010101716303424b1f431011090057000000000185fc073d380017c4af1a0cbb6f0a011200a9090000000603ef010101716303424b21431011090057000000000185fc05d9c00017c4ae0f0cbb6e630110014d080000000603ef010101716303424b23431011090057000000000185fc047a300017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b25431011090057000000000185fc031aa00017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b24431011090057000000000185fc01bb100017c4b3870cbb6c2c011b0102070000000603ef010101716303424b23431011090057000000000185fc005b800017c4ae620cbb6dbc011b0102070000000603ef010101716303424b21431011090057000000000185fbfef8080017c4aec60cbb6d58011a0102080000000603ef010101716303424b21431011090057000000000185fbfd9c600017c4b7800cbb6f1a01190162080000000603ef010101716303424b21431011090057000000000185fbfc38e80017c4b1500cbb6f6e0119009d090000000603ef010101716303424b21431011090057000000000185fbfad9580017c4b5380cbb704601140077090000000603ef010101716303424b23431011090057000000000185fbf979c80017c4b5060cbb706701100052080000000603ef010101716303424b20431011090057000000000185fbf81a380017c4b12f0cbb6fc1010401200a0000000603ef010101716303424b21431011090057000000000185fbf6baa80017c4b12f0cbb6fc101040120090000000603ef010101716303424b21431011090057000000000185fbf557300017c4b12f0cbb6fc101040120080000000603ef010101716303424b23431011090057000000000185fbf3f7a00017c4ad790cbb71c601020070090000000603ef010101716303424b25431011090057000000000185fbf298100017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b25431011090057000000000185fbf138800017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b26431011090057000000000185fbefd5080017c4b1f70cbb710e00fa0083090000000603ef010101716303424b23431011090057000000000185fbee79600017c4b8ff0cbb6c0b00fd00da080000000603ef010101716303424b24431011090057000000000185fbed19d00017c4b1720cbb710e0108008a070000000603ef010101716303424b20431011090057000000000185fbebb6580017c4b2bf0cbb6e630114008a070000000603ef010101716303424b1c4310110900570000
 1c -- number of record end
 0000186a*/
let imei = -1;

function parseImei(data) {
   let l = 0;
   let ll = 4;
   let hexData = data.substr(l, ll);
   let dataVal = parseInt(hexData, 16);
   console.log(hexData, 'IMEI LENGTH', dataVal);
   if (data.length == 4 + dataVal * 2) {
      l += ll;
      ll = dataVal * 2;
      let imeiData = data.substr(l, ll);
      hexData = ''
      for (let i = 1; i < imeiData.length; i += 2) {
         hexData += imeiData.charAt(i);
      }
      console.log(hexData, 'IMEI', hexData);
      return hexData;
   } else {
      return -1;
   }
}

function parseData(data) {
   let dataArr = [];
   if (!data) {
      return dataArr;
   }
   try {
      console.log("Data received: ", data);
      console.log("IMEI====================================: ",imei);
      if (imei == -1 || data.length < 40) {
         console.log('imei', imei);
         imei = parseImei(data); // just set IMEI
         return dataArr; // return empty array acknowledgement 0x01 for yes 0x00 for no next data
      }
      else {
         const precision = 0.0000001;
         //4,4,1,1,all record, 1,4
         //Preamble,Data Field Length,codec,number of data,... all record...,number of record end, CRC 16/IBM
         let l = 0;
         let ll = 8;
         let hexData = data.substr(l, ll);
         let dataVal = parseInt(hexData, 16);
         l += ll;
         ll = 8;
         hexData = data.substr(l, ll);
         dataVal = parseInt(hexData, 16);

         l += ll;
         ll = 2;
         hexData = data.substr(l, ll);
         dataVal = parseInt(hexData, 16);
         l += ll;
         ll = 2;
         hexData = data.substr(l, ll);
         let no_of_rec = parseInt(hexData, 16);

         console.log(hexData, 'NUMBER OF RECORD ', no_of_rec);


         l += ll;
         ll = data.length - l - 10;	 // 1 byte no of rec 4 CRC
         let allRecs = data.substr(l, ll);

         let reclen = allRecs.length / no_of_rec;

         for (let i = 0; i < no_of_rec; i++) {
            var allRec = allRecs.substr(reclen * i, reclen);
            //console.log('RECORD',allRec);
            var dataJson = {
               imei: imei,
               avltm: 0,
               location: {
                  type: "Point",
                  coordinates: [] //[long, latitude] must be in same order
               },
               alt: 0,
               ang: 0,
               spd: 0,
               odata: 3001,
               createdon: Date.now(),
               updatedon: Date.now()
            };

            //  8,1,4,4,2,2,1,2
            //timestamp,priority,longitude,latitude,altitude,angle,satelite,speed
            l = 0;
            ll = 16;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            //console.log(hexData,'Time',dataVal);
            dataJson.avltm = dataVal;
            l = l + ll;
            ll = 2;	// priority
            l = l + ll;
            ll = 8;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            var lng = dataVal * precision;
            if (isNegativeNum(lng)) {
               lng = lng * -1;
            }
            dataJson.location.coordinates[0] = lng;
            l = l + ll;
            ll = 8;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            var lat = dataVal * precision;
            if (isNegativeNum(lat)) {
               lat = lat * -1;
            }
            dataJson.location.coordinates[1] = lat;

            l = l + ll;
            ll = 4;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            dataJson.alt = dataVal;
            l = l + ll;
            ll = 4;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            dataJson.ang = dataVal;
            l = l + ll;
            ll = 2;	// satelite
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);

            l = l + ll;
            ll = 4;
            hexData = allRec.substr(l, ll);
            dataVal = parseInt(hexData, 16);
            dataJson.spd = dataVal;
            //console.log('RECORD',dataJson);
            dataArr.push(dataJson);
            //'00000001'; // ackowlegemenet for 1 record  	no_of_rec ==1
            //'00000002'; // ackowlegemenet for 2 or more record      no_of_rec>=2
         }
      }
   } catch (e) {
      console.error(e);
      console.log(e.message);
   }
   return dataArr;
}


/*
Note:
To determine if the coordinate is negative, convert it to binary format and check the very rst bit. If it is 0, coordinate is positive, if it is 1, coordinate is
negative.
 */
function isNegativeNum(x) {
   let binary = x.toString(2);
   if (binary.startsWith('0')) { //check first bit
      return true; //-ve
   }
   return false; //+ve
}

// var data = "000f333530353434353034393433393134";// imei data
// parseData(data);
// var data = "00000000000004ef081c00000185fc10de100017c4a5ec0cbb757c01170152080000000603ef010101716303424b25431011090057000000000185fc0f7e800017c4ad8a0cbb73a9011c0148070000000603ef010101716303424b21431011090057000000000185fc0e1b080017c4b6d90cbb73db01170123080000000603ef010101716303424b21431011090057000000000185fc0cbb780017c4ace30cbb7140010e0123090000000603ef010101716303424b1f431011090057000000000185fc0b5be80017c4b0a90cbb720801130017080000000603ef010101716303424b21431011090057000000000185fc09fc580017c4b3760cbb6f7e01120017080000000603ef010101716303424b27431011090057000000000185fc0898e00017c4af1a0cbb6f0a011200a9080000000603ef010101716303424b1f431011090057000000000185fc073d380017c4af1a0cbb6f0a011200a9090000000603ef010101716303424b21431011090057000000000185fc05d9c00017c4ae0f0cbb6e630110014d080000000603ef010101716303424b23431011090057000000000185fc047a300017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b25431011090057000000000185fc031aa00017c4b1b40cbb6f7e0119009c080000000603ef010101716303424b24431011090057000000000185fc01bb100017c4b3870cbb6c2c011b0102070000000603ef010101716303424b23431011090057000000000185fc005b800017c4ae620cbb6dbc011b0102070000000603ef010101716303424b21431011090057000000000185fbfef8080017c4aec60cbb6d58011a0102080000000603ef010101716303424b21431011090057000000000185fbfd9c600017c4b7800cbb6f1a01190162080000000603ef010101716303424b21431011090057000000000185fbfc38e80017c4b1500cbb6f6e0119009d090000000603ef010101716303424b21431011090057000000000185fbfad9580017c4b5380cbb704601140077090000000603ef010101716303424b23431011090057000000000185fbf979c80017c4b5060cbb706701100052080000000603ef010101716303424b20431011090057000000000185fbf81a380017c4b12f0cbb6fc1010401200a0000000603ef010101716303424b21431011090057000000000185fbf6baa80017c4b12f0cbb6fc101040120090000000603ef010101716303424b21431011090057000000000185fbf557300017c4b12f0cbb6fc101040120080000000603ef010101716303424b23431011090057000000000185fbf3f7a00017c4ad790cbb71c601020070090000000603ef010101716303424b25431011090057000000000185fbf298100017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b25431011090057000000000185fbf138800017c4aa6a0cbb73fc00f90073080000000603ef010101716303424b26431011090057000000000185fbefd5080017c4b1f70cbb710e00fa0083090000000603ef010101716303424b23431011090057000000000185fbee79600017c4b8ff0cbb6c0b00fd00da080000000603ef010101716303424b24431011090057000000000185fbed19d00017c4b1720cbb710e0108008a070000000603ef010101716303424b20431011090057000000000185fbebb6580017c4b2bf0cbb6e630114008a070000000603ef010101716303424b1c43101109005700001c0000186a"
// let res = parseData(data);
// console.log(res);
